//brute force method is to save all the elements in an array and then run the palindrome program

//This is the two pointer method

#include<bits/stdc++.h>
using namespace std;

struct ListNode {
int val;
ListNode* next;
}

bool isPalindrome(ListNode* head)
{
if(head == NULL)
{
return true;
}

ListNode* slow = head;          //moves one step at a time
ListNode* fast = head;         //moves two steps at a time

//run a loop to get to the middle point of the list

while (fast->next != NULL  && fast->next->next != NULL)
{
slow = slow->next;                    //moves one step at a time
fast= fast->next->next;              //moves two steps at a time
}

//when the loop breaks, slow = the mid element (when #elts = odd) and first middle elt otherwise (if number of elements is even then there will be two middle elts)
//use slow->next to reverse the second of the list so we can compare the first and the second half to check for palindrome condition
ListNode* secondhalfhead = reverse(slow->next);
ListNode* firsthalfhead  = head;

//once we get the heads, we compare each element, and if we find a difference return false

while(firsthalfhead != NULL  && secondhalfhead != NULL)
{
if(firsthalfhead->val != secondhalfhead->val)
{
return true;
}
firsthalfhead = firsthalfhead->next;
secondhalfhead = secondhalfhead->next;
}
//else
return true;
}

//reverse fuction to reverse the linked list
private ListNode* reverse(ListNode* head)
{
ListNode* current = head;
ListNode* prev, *nextnode;
prev =  NULL;

while(current != NULL)
{
nextnode=current->next;
current->next = prev;
prev = current;
current= nextnode;
}
head = prev;
return head;
}
}


****************************************************************************************************************
LeetCode accepted code



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL)
            return true;
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast->next != NULL && fast->next->next != NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        //when the loop breaks, slow = the mid element (when #elts = odd) and first mid elt otherwise
        //use slow->next to revers or make a mirror image of the second half
        
        ListNode* secondhalfhead = mirrorimageReverse(slow->next);
        ListNode* firsthalfhead = head;
        //compare them
        
        while(firsthalfhead != NULL && secondhalfhead != NULL)
        {
            if(firsthalfhead->val != secondhalfhead->val)
                return false;
            firsthalfhead = firsthalfhead->next;
            secondhalfhead = secondhalfhead->next;
        }
        return true;
    }
    private: ListNode* mirrorimageReverse (ListNode* head)
    {
        ListNode* current = head;
        ListNode* prev, *nextnode;
        prev = NULL;
        
        while(current != NULL)
        {
            nextnode=current->next;
            current->next = prev;
            prev = current;
            current = nextnode;
        }
        head = prev;
    
    return head;
    }
    
};
